package Homework2;

public final class LinkedQueue <T> implements QueueInterface<T>
{

	 private Node firstNode;
	 private Node lastNode;
	 
	 public LinkedQueue()
	 {
		 firstNode = null;
		 lastNode = null;
	 }
	  
	  
	@Override
	public void enqueue(T newEntry) 
	{
	  Node newNode = new Node(lastNode, newEntry, null);
	  if(isEmpty())
		  firstNode = newNode;
	  else
		  lastNode.setNextNode(newNode);
	  lastNode = newNode;
	}

	@Override
	public T dequeue() 
	{
		T front = getFront();
		assert firstNode != null;
		firstNode.setData(null);
		firstNode = firstNode.getNextNode();
		
		if(firstNode == null)
			lastNode = null;
		
		return front;
	}

	@Override
	public T getFront() 
	{
		if(isEmpty())
			throw new EmptyQueueException();
		else
			return firstNode.getData();
	}

	
	public boolean isEmpty() 
	{
		return (firstNode == null) && (lastNode == null);
		
	}

	@Override
	public void clear() 
	{
		firstNode = null;
		lastNode = null;	
	}

	private class Node
	{
		private T data;
		private Node next;
		private Node prev;
		private int numberOfEntries = 0;
		
		
		public Node (Node prevNode, T dataSection, Node nextNode)
		{
			data = dataSection;
			next = nextNode;
		}
		

		private T getData()
		{
			return data;
		}
		 
		private void setData(T newData)
		{
			data = newData;
		}
		 
		public Node getNextNode()
		{
			return next;
		}
		 
		public void setNextNode(Node nextNode)
		{
			next = nextNode;
		}
		 
		public void setPreviousNode(Node previousNode)
		{
			prev = previousNode;
		}
	 
		public Node getPreviousNode()
		{
			return prev;
		}
		
	}
}

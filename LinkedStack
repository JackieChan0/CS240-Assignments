package Homework2;

import java.util.EmptyStackException;

public class LinkedStack<T> implements StackInterface<T>
{

	public Node topNode;
	private int numberOfEntries;
	
	public LinkedStack()
	{
      topNode = null;
	}

	
	@Override
	public void push(T newEntry) 
	{
	  	Node newNode = new Node(newEntry,topNode);
	  	topNode = newNode;
		
	}

	@Override
	public T pop() 
	{
		T top = peek();
		assert topNode != null;
		topNode = topNode.getNextNode();
		
		return top;

	}

	@Override
	public T peek() 
	{
		if(isEmpty())
			throw new EmptyStackException();
		else
			return topNode.getData();
	}

	@Override
	public boolean isEmpty() 
	{
		return topNode == null;
		
	}

	@Override
	public void clear() 
	{
		topNode = null;
		
	}
	
	private class Node
	{
		private T data;
		private Node next;	
		
		private Node (T data)
		{
			this(data, null);
		}
		
		private Node(T data, Node nextNode)
		{
			this.data = data;
			next = nextNode;
		}

		private T getData()
		{
			return data;
		}
		
		
		public Node getNextNode()
		{
			return next;
		}
		
		
	}

	public T[] toArray()
	{
		  @SuppressWarnings("unchecked")
		  T[] array = (T[])new Object[numberOfEntries];
		  int index = 0;
		  Node temp = topNode;
		  
		  while(index < numberOfEntries && temp != null) 
		  {
			  array[index] = temp.data;
			  temp = temp.next;
		      index++;
		  }
		  return array;
		}
}
